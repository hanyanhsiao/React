<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Switch</title>
    <style type="text/css">
        .switch{
            width:60px;height: 30px;background-color: #dddddd;border-radius: 15px;
        }
        .switch>.btn{
            width: 30px;height: 30px;background-color:gray;border-radius: 15px;
        }
        .switch-on{
            background-color:rgb(71, 11, 223) ;
        }
        .switch-on>.btn{
            background-color:rgb(127, 131, 245);margin-left: 30px;
        }
    
    </style>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
    <!-- 載入Babel 編譯器套件 -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.2.0/dist/redux.js"></script>
   
    <script type="text/babel">
        class Button extends React.Component{
            render(){
                return <div className= "btn"></div>
            }
        }
        class Switch extends React.Component{
            constructor(props){
                console.log("init");
                super(props);
                this.state= store.getState(); //串接點，初始的state
            }
            render(){
                return <div className={"switch"+(this.state.on ? " switch-on":"")} 
                            onClick={this.update.bind(this)} >
                            
                    <Button/>
                </div>;

            }
            update(){ //派送 ，使用者的操作觸發行動
                 store.dispatch({
                    type:"ChangeSwitch"
                });
            }
            //連接redux的狀態更新
            refresh(){
            console.log("refresh");

                this.setState(store.getState());
            }
            componentDidMount(){
                console.log("ComponentDidMount");
                this.unsubscribe = store.subscribe(this.refresh.bind(this));
            }
            componentWillUnmount(){
                console.log("componentWillmount");
                this.unsubscribe();
            }
        }

        //以下是redux的程式
        let store;
        let reducer = function(state, action){
            
            switch(action.type){
                case "ChangeSwitch":
                    return {on: !state.on}; //接到派送更新狀態
                default: 
                    return state;
            }
        };


        window.addEventListener("load",()=>{
            store=Redux.createStore(reducer,{on:false});
            ReactDOM.render(<Switch/>, document.body);
        });

    </script>
</head>
<body>
</body>
</html>